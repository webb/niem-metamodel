digraph G {
  edge [fontname = "Helvetica", fontsize = 10, dir = forward];
  node [fontname = "Helvetica", fontsize = 10, width = 0, height = 0];
  rankdir = LR;

  node [shape=Mrecord];
  
  // model ///////////////////////////////////////////////////////////////////

  Model [label="\N\l|- Namespace*\l- ObjectProperty*\l- Class*\l- DataProperty*\l- Datatype*\l"];

  // namespace ///////////////////////////////////////////////////////

  Namespace [label="\N\l- NamespaceURI\l- NamespacePrefixName\l- DefinitionText [0-1]\l"];

  Model -> Namespace [style = invis];

  // object property ///////////////////////////////////////////////////////

  ObjectProperty [label="\N\l- Name\l- Namespace\l- DefinitionText [0-1]\l"];
  ObjectProperty -> Class [taillabel="[0-1]"];
  ObjectProperty -> SubPropertyOf [dir=both] [taillabel="[0-1]"];

  SubPropertyOf [label="\N\l"];

  // class ///////////////////////////////////////////////////////

  Class [label="\N\l- Name\l- Namespace\l- DefinitionText [0-1]\l- AbstractIndicator [0-1]\l- ContentStyleCode [0-1]"];
  Class -> ExtensionOf [dir=both,taillabel="[0-1]"];
  ExtensionOf [label="\N\l"];
  ExtensionOf -> { HasDataProperty HasObjectProperty } [taillabel="0-n"];
  ExtensionOf -> HasValue [taillabel="0-1"];
  
  HasValue [label="\N\l"];
  HasValue -> Datatype;

  HasObjectProperty [label="\N\l- @sequenceID\l- @minOccursQuantity\l- @maxOccursQuantity\l"];
  HasObjectProperty:w -> ObjectProperty:n;

  HasDataProperty [label="\N\l- @minOccursQuantity\l- @maxOccursQuantity\l"];
  HasDataProperty -> DataProperty;

  // data property ///////////////////////////////////////////////////////

  DataProperty [label="\N\l- Name\l- Namespace\l- DefinitionText [0-1]\l"];
  DataProperty -> Datatype [taillabel="[0-1]"];
  
  // datatype ///////////////////////////////////////////////////////

  Datatype [label="\N\l- Name\l- Namespace\l- DefinitionText [0-1]\l"];
  Datatype -> ListOf [dir=both,taillabel="[0-1]"];
  Datatype -> UnionOf [dir=both,taillabel="[0-1]"];
  Datatype -> RestrictionOf [dir=both,taillabel="[0-1]"];

  ListOf [label="\N\l"];
  UnionOf [label="\N\l"];
  RestrictionOf [label="\N\l"];
  RestrictionOf -> FacetAbstract;

  // facets
  FacetAbstract [label="\N\l"];
  Length [label="\N\l|Value\lDefinitionText\l"];
  MinLength [label="\N\l|Value\lDefinitionText\l"];
  MaxLength [label="\N\l|Value\lDefinitionText\l"];
  { Length MinLength MaxLength } -> NonNegativeValue;
  
  Pattern [label="\N\l|Value\lDefinitionText\l"];
  Pattern -> StringValue;
  
  Enumeration [label="\N\l|Value\lDefinitionText\l"];
  
  WhiteSpace [label="\N\l|WhiteSpaceValueCode\lDefinitionText\l"];
  
  MaxInclusive [label="\N\l|Value\lDefinitionText\l"];
  MaxExclusive [label="\N\l|Value\lDefinitionText\l"];
  MinExclusive [label="\N\l|Value\lDefinitionText\l"];
  MinInclusive [label="\N\l|Value\lDefinitionText\l"];
  { Enumeration MaxInclusive MaxExclusive MinExclusive MinInclusive } -> AnyValueAbstract;

  TotalDigits [label="\N\l|Value\lDefinitionText\l"];
  TotalDigits -> PositiveValue;
  
  FractionDigits [label="\N\l|Vaalue\lDefinitionText\l"];
  FractionDigits -> NonNegativeValue;               

  edge [dir=back, label="SubPropertyOf"];
  FacetAbstract -> { Length MinLength MaxLength Pattern Enumeration WhiteSpace MaxInclusive MaxExclusive MinExclusive MinInclusive TotalDigits FractionDigits }

  AnyValueAbstract -> { NonNegativeValue PositiveValue StringValue } [dir=back, label="SubPropertyOf"];
  
}
